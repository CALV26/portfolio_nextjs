// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now()) // member since 2025
  updatedAt DateTime @updatedAt

  // Relations
  posts                 Post[]         // A user can have many posts
  comments              Comment[]      // A user can have many comments
  likes                 Like[]         // A user can like many posts
  followers             Follows[]      @relation("following") // Users who follow this user
  following             Follows[]      @relation("follower")  // Users this user follows
  notifications         Notification[] @relation("userNotifications")    // Notifications received by this user
  notificationsCreated  Notification[] @relation("notificationCreator")  // Notifications triggered by this user
}

model Post {
  id          String        @id @default(cuid())
  authorId    String
  content     String?
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id         String        @id @default(cuid())
  content    String
  authorId   String
  postId     String
  createdAt  DateTime      @default(now())

  // Relations
  author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
  @@unique([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
  @@id([followerId, followingId])
}

model Notification {
  id         String           @id @default(cuid())
  userId     String                                 // User who receives the notification
  creatorId  String                                 // User who triggered the notification
  type       NotificationType                       // Type of notification: LIKE, COMMENT, FOLLOW
  read       Boolean          @default(false)       // Has the notification been read?
  postId     String?                                // Related post (optional)
  commentId  String?                                // Related comment (optional)
  createdAt  DateTime         @default(now())

  // Relations
  user    User      @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User      @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}